<Window x:Class="Ann.MainWindow.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ann="clr-namespace:Ann"
        xmlns:behavior="clr-namespace:Ann.Foundation.Control.Behavior;assembly=Ann.Foundation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:interactivity="clr-namespace:Reactive.Bindings.Interactivity;assembly=ReactiveProperty.NET46"
        xmlns:mainWindow="clr-namespace:Ann.MainWindow"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        Width="{x:Static ann:ViewConstants.MainWindowWithShadowWidth}"
        d:DataContext="{d:DesignData mainWindow:MainWindowViewModel}"
        Activated="Window_Activated"
        AllowsTransparency="True"
        Background="Transparent"
        BorderThickness="{x:Static ann:ViewConstants.MainWindowBorderThickness}"
        FontFamily="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto"
        IsVisibleChanged="Window_IsVisibleChanged"
        Left="{Binding Left.Value,
                       Mode=TwoWay}"
        Loaded="Window_Loaded"
        MouseLeftButtonDown="Window_MouseLeftButtonDown"
        ResizeMode="NoResize"
        ShowInTaskbar="False"
        SnapsToDevicePixels="True"
        TextOptions.TextFormattingMode="Ideal"
        TextOptions.TextRenderingMode="Auto"
        Top="{Binding Top.Value,
                      Mode=TwoWay}"
        WindowStyle="None"
        mc:Ignorable="d">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="CandidatePanel.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <SolidColorBrush x:Key="BackgroundBrush" Color="White" />

            <DropShadowEffect x:Key="ShadowEffect"
                              BlurRadius="{x:Static ann:ViewConstants.ShadowSize}"
                              Direction="270"
                              Opacity="0.6"
                              ShadowDepth="3"
                              Color="Black" />

            <BitmapCache x:Key="ShadowCache" RenderAtScale="0.5" />

            <Style x:Key="ShadowBorderStyle" TargetType="{x:Type Border}">
                <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                <Setter Property="Effect" Value="{StaticResource ShadowEffect}" />
                <Setter Property="CacheMode" Value="{StaticResource ShadowCache}" />
            </Style>
        </ResourceDictionary>
    </Window.Resources>

    <i:Interaction.Behaviors>
        <behavior:WindowTaskTrayIconBehavior IconSource="/app.ico"
                                             LeftClickedCommand="{Binding ShowCommand,
                                                                          Mode=OneTime}"
                                             ToolTipText="{Binding Caption,
                                                                   Mode=OneTime}">
            <behavior:WindowTaskTrayIconBehavior.ContextMenu>
                <ContextMenu>
                    <MenuItem Command="{Binding IndexUpdateCommand, Mode=OneTime}" Header="{DynamicResource MenuItem_UpdateIndex}" />
                    <MenuItem Command="{Binding SettingShowCommand, Mode=OneTime}" Header="{DynamicResource MenuItem_Settings}" />
                    <Separator Margin="-100,8,-100,8" />
                    <MenuItem Command="{Binding ExitCommand, Mode=OneTime}" Header="{DynamicResource MenuItem_Exit}" />
                </ContextMenu>
            </behavior:WindowTaskTrayIconBehavior.ContextMenu>
        </behavior:WindowTaskTrayIconBehavior>

        <behavior:WindowDisposeDataContextOnClosedBehavior />
    </i:Interaction.Behaviors>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="ContentRendered">
            <interactivity:EventToReactiveCommand Command="{Binding InitializeCommand, Mode=OneTime}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Canvas x:Name="ShadowPanel"
            Margin="{x:Static ann:ViewConstants.MainWindowShadowMargin}"
            VerticalAlignment="Top">
        <Border x:Name="BasePanel"
                Panel.ZIndex="1"
                Background="{StaticResource BackgroundBrush}"
                CornerRadius="{x:Static ann:ViewConstants.MainWindowCornerRadius}">

            <Canvas x:Name="MainPanel"
                    Width="{x:Static ann:ViewConstants.MainWindowWidth}"
                    VerticalAlignment="Top">
                <DockPanel x:Name="InputLine"
                           Canvas.Left="0"
                           Canvas.Top="0"
                           Width="{x:Static ann:ViewConstants.InputLineWidth}"
                           Margin="{x:Static ann:ViewConstants.BaseMargin}"
                           LastChildFill="True">
                    <materialDesign:PopupBox Margin="0,0,-8,0"
                                             Closed="PopupBox_Closed"
                                             DockPanel.Dock="Right"
                                             Foreground="#222"
                                             PlacementMode="BottomAndAlignRightEdges">
                        <StackPanel Margin="0,8">
                            <MenuItem Command="{Binding IndexUpdateCommand, Mode=OneTime}" Header="{DynamicResource MenuItem_UpdateIndex}" />
                            <MenuItem Command="{Binding SettingShowCommand, Mode=OneTime}" Header="{DynamicResource MenuItem_Settings}" />
                            <Separator />
                            <MenuItem Command="{Binding ExitCommand, Mode=OneTime}" Header="{DynamicResource MenuItem_Exit}" />
                        </StackPanel>
                    </materialDesign:PopupBox>

                    <TextBox x:Name="InputTextBox"
                             Background="Transparent"
                             BorderThickness="0"
                             CaretBrush="#222"
                             FontSize="32"
                             Foreground="#222"
                             Text="{Binding Input.Value,
                                            Mode=TwoWay,
                                            UpdateSourceTrigger=PropertyChanged}"
                             TextChanged="InputTextBox_TextChanged">
                        <TextBox.InputBindings>
                            <KeyBinding Key="Up"
                                        Command="{Binding SelectedCandidateMoveCommand,
                                                          Mode=OneTime}"
                                        CommandParameter="-1" />
                            <KeyBinding Key="Down"
                                        Command="{Binding SelectedCandidateMoveCommand,
                                                          Mode=OneTime}"
                                        CommandParameter="1" />

                            <KeyBinding Key="Tab"
                                        Command="{Binding SelectedCandidateMoveCommand,
                                                          Mode=OneTime}"
                                        CommandParameter="-1"
                                        Modifiers="Shift" />
                            <KeyBinding Key="Tab"
                                        Command="{Binding SelectedCandidateMoveCommand}"
                                        CommandParameter="1" />
                        </TextBox.InputBindings>
                    </TextBox>
                </DockPanel>
            </Canvas>
        </Border>

        <Border x:Name="ShadowTop"
                Width="{x:Static ann:ViewConstants.MainWindowWidth}"
                Height="{x:Static ann:ViewConstants.MainWindowCournerCornerRadiusUnit}"
                CornerRadius="6,6,0,0"
                Style="{StaticResource ShadowBorderStyle}" />
        <Border x:Name="ShadowBottom"
                Canvas.Bottom="0"
                Width="{x:Static ann:ViewConstants.MainWindowWidth}"
                Height="{x:Static ann:ViewConstants.MainWindowCournerCornerRadiusUnit}"
                CornerRadius="0,0,6,6"
                Style="{StaticResource ShadowBorderStyle}" />

        <mainWindow:StatusBar x:Name="StatusBar"
                              Canvas.Bottom="2"
                              Width="{x:Static ann:ViewConstants.StatusBarWidth}"
                              Panel.ZIndex="1"
                              DataContext="{Binding StatusBar,
                                                    Mode=OneTime}" />
        <Border x:Name="ShadowRight"
                Canvas.Top="{x:Static ann:ViewConstants.MainWindowCournerCornerRadiusUnit}"
                Canvas.Right="0"
                Width="{x:Static ann:ViewConstants.MainWindowCournerCornerRadiusUnit}"
                Style="{StaticResource ShadowBorderStyle}" />
        <Border x:Name="ShadowLeft"
                Canvas.Left="0"
                Canvas.Top="{x:Static ann:ViewConstants.MainWindowCournerCornerRadiusUnit}"
                Width="{x:Static ann:ViewConstants.MainWindowCournerCornerRadiusUnit}"
                Style="{StaticResource ShadowBorderStyle}" />
    </Canvas>
</Window>
